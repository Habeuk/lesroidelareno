<?php
use Drupal\Core\Url;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\block_content\Entity\BlockContent;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function lesroidelareno_theme() {
  $hooks = [];
  return $hooks;
}

/**
 * Alter the fields used to represent an entity in the IEF table.
 *
 * @param array $fields
 *        The fields, keyed by field name.
 * @param array $context
 *        An array with the following keys:
 *        - parent_entity_type: The type of the parent entity.
 *        - parent_bundle: The bundle of the parent entity.
 *        - field_name: The name of the reference field on which IEF is
 *        operating.
 *        - entity_type: The type of the referenced entities.
 *        - allowed_bundles: Bundles allowed on the reference field.
 *        
 * @see \Drupal\inline_entity_form\InlineFormInterface::getTableFields()
 */
function lesroidelareno_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['entity_type'] == 'node') {
    $fields['nid'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
  }
  elseif ($context['entity_type'] == 'commerce_product') {
    $fields['product_id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
    $fields['callback_layout_url'] = [
      'type' => 'callback',
      'label' => t('Variations du produit'),
      'callback' => '\Drupal\lesroidelareno\lesroidelareno::getRouteVariations',
      'weight' => 10
    ];
  }
  elseif ($context['entity_type'] == 'block_content') {
    $fields['id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
  }
  elseif ($context['entity_type'] == 'paragraph') {
    $fields['id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
  }
}

/**
 *
 * @param array $settings
 * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
 */
function lesroidelareno_js_settings_alter(array &$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  // dump('');
}

/**
 * implement hook_editor_js_settings_alter
 */
function lesroidelareno_editor_js_settings_alter(array &$settings) {
  $link = '/' . drupal_get_path('module', 'lesroidelareno') . '/js/ck-editor.js';
  foreach ($settings['editor']['formats'] as $k => $value) {
    $settings['editor']['formats'][$k]['editorSettings']['customConfig'] = $link;
  }
}

/**
 *
 * @param
 *        $vars
 */
function lesroidelareno_preprocess_html(&$vars) {
  $routeName = \Drupal::routeMatch()->getRouteName();
  // $parameters = \Drupal::routeMatch()->getParameters()->all();
  // dump($routeName);
  // $parameters = \Drupal::routeMatch()->getParameters()->all();
  // if (!empty($parameters['content_generate_entity'])) {
  // /**
  // *
  // * @var \Drupal\generate_mapping_content\Entity\ContentGenerateEntity
  // $contentGenerate
  // */
  // $contentGenerate = $parameters['content_generate_entity'];
  // $intro = $contentGenerate->get('introduction')->value;
  // $metaDescription = [
  // '#tag' => 'meta',
  // '#attributes' => [
  // 'name' => 'description',
  // 'content' => strip_tags($intro)
  // ]
  // ];
  // $vars['page']['#attached']['html_head'][] = [
  // $metaDescription,
  // 'meta-description'
  // ];
  // }
  // else {
  // $vars['page']['#attached']['library'][] = 'login_rx_vuejs/vuejs_dev';
  // }
  //
  // On charge tawk sur les routes non admin.
  $hidden = false;
  $idUser = \Drupal::currentUser()->id();
  
  //
  if (!str_contains($routeName, 'system.admin') && !$hidden && $idUser != 1) {
    $vars['page']['#attached']['library'][] = 'lesroidelareno/lesroidelareno_tawk.config';
  }
  // On ajoute la class 'container' sur tous les pages de termes taxo.
  if ('entity.taxonomy_term.canonical' == $routeName) {
    if (empty($vars['page']['content']['attributes'])) {
      $Attribute = new Attribute();
      $Attribute->addClass('container');
      $vars['page']['content']['attributes'] = $Attribute;
    }
    else
      $vars['page']['content']['attributes']->addClass('container');
  }
  // On charge la bibiotheque pour ameliorer la presentation de l'edition des
  // forms et ...
  if ('entity.taxonomy_term.canonical' == $routeName || str_contains($routeName, '.edit_form')) {
    $vars['page']['#attached']['library'][] = 'lesroidelareno/lesroidelareno_admin';
  }
}

function lesroidelareno_preprocess_facets_result_item__checkbox(&$vars) {
  
  // if (!empty($vars['items'])) {
  // foreach ($vars['items'] as $k => $item) {
  // $vars['items'][$k]['value']['#title']['icone'] = [
  // '#type' => 'html_tag',
  // '#tag' => 'h1',
  // '#value' => 'Icone'
  // ];
  // }
  // }
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'name' => $vars['value'],
    'vid' => 'categorie_produit'
  ]);
  $image_style = 'thumbnail';
  /**
   *
   * @var \Drupal\taxonomy\Entity\Term $term
   */
  $field_name = 'field_image';
  $term = reset($term);
  if ($term->hasField($field_name)) {
    $first = $term->get($field_name)->first();
    if ($first) {
      $file = File::load($first->getValue()['target_id']);
      if ($file)
        $vars['icone'] = [
          '#theme' => 'image_style',
          '#style_name' => $image_style,
          '#uri' => $file->getFileUri()
        ];
    }
    else {
      $settings = $term->get($field_name)->getSettings();
      // dump($settings['default_image']);
      if (!empty($settings['default_image'])) {
        $fileManager = \Drupal::entityTypeManager()->getStorage('file');
        /**
         *
         * @var File $file
         */
        $file = $fileManager->loadByProperties([
          'uuid' => $settings['default_image']['uuid']
        ]);
        if (!empty($file)) {
          $file = reset($file);
          $vars['icone'] = [
            '#theme' => 'image_style',
            '#style_name' => $image_style,
            '#uri' => $file->getFileUri()
          ];
        }
      }
    }
  }
}

/**
 * Cette function est provisoir, elle corrige un bug au niveau de 'target_id';
 *
 * @param array $variables
 */
function lesroidelareno_preprocess_pager(array &$variables) {
  $element = $variables['pager']['#element'];
  $parameters = $variables['pager']['#parameters'];
  // $quantity = empty($variables['pager']['#quantity']) ? 0 :
  // $variables['pager']['#quantity'];
  $route_name = $variables['pager']['#route_name'];
  $route_parameters = $variables['pager']['#route_parameters'] ?? [];
  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  // Drupal\Core\Pager\PagerManager
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  if ($pager) {
    $current_page = $pager->getCurrentPage();
    $pager_max = $pager->getTotalPages();
    // clean parametter
    foreach ($parameters as $k => $value) {
      if (is_array($value)) {
        foreach ($value as $b => $val) {
          if (isset($val['target_id'])) {
            $parameters[$k][$b] = $val['target_id'];
          }
        }
      }
    }
    
    /**
     * On recrit les url pour les cas ou ces derniers contientienne target_id.
     */
    // pages
    if (!empty($variables['items']['pages'])) {
      foreach ($variables['items']['pages'] as $i => $page) {
        $options = [
          'query' => $pager_manager->getUpdatedParameters($parameters, $element, $i - 1)
        ];
        $variables['items']['pages'][$i]['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
      }
    }
    // first
    if (!empty($variables['items']['first'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, 0)
      ];
      $variables['items']['first']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
    // previous
    if (!empty($variables['items']['previous'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $current_page - 1)
      ];
      $variables['items']['previous']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
    // Next
    if (!empty($variables['items']['next'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $current_page + 1)
      ];
      $variables['items']['next']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
    // last
    if (!empty($variables['items']['last'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $pager_max - 1)
      ];
      $variables['items']['last']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
  }
}

/**
 *
 * @file
 * Primary module hooks for lesroidelareno module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
function lesroidelareno_views_pre_build(ViewExecutable $view) {
  /**
   *
   * @var \Drupal\node\Entity\Node $node
   */
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    if (!empty($node->field_selectionner_le_domaine) && $view->id() == 'realisations_par_prestataires') {
      /**
       *
       * @var \Drupal\Core\Field\FieldItemList $field
       */
      $field = $node->field_selectionner_le_domaine;
      $args = [];
      foreach ($field->getValue() as $val) {
        if (!empty($val['value'])) {
          $args[] = $val['value'];
          $args[] = $val['value'];
        }
      }
      
      $view->setArguments($args);
    }
    //
    elseif ($view->id() == 'produits_simialires' && $view->current_display == 'block_4') {
      /**
       *
       * @var \Drupal\Core\Field\FieldItemList $field
       */
      $field = $node->field_selectionner_le_domaine;
      $args = [];
      foreach ($field->getValue() as $val) {
        $args[] = $val['value'];
      }
      $view->setArguments($args);
    }
  }
}

/**
 * implement hook_preprocess_
 */
function lesroidelareno_preprocess_views_view_unformatted__produits_simialires(&$vars) {
  /**
   *
   * @var ViewExecutable $view
   */
  $view = $vars['view'];
  if ($view->current_display === 'block_3')
    foreach ($vars['rows'] as $key => $row) {
      if (isset($row['content']['#view_mode'])) {
        $template = _lesroidelareno_get_product_theme($vars['rows'][$key]['content']['#commerce_product']);
        $vars['rows'][$key]['content']['#view_mode'] = $template;
        $vars['rows'][$key]['content']['#cache']['keys'][3] = $template;
      }
    }
}

function _lesroidelareno_get_product_theme(Drupal\commerce_product\Entity\Product $product) {
  $val = $product->get('field_en_promotion_sur_les_roide')->offsetGet(0)->getValue();
  if (!empty($val['value'])) {
    return 'teaser_externe';
  }
  else {
    return 'teaser';
  }
}

/**
 * implement hook_ENTITY_TYPE_access
 */
function lesroidelareno_block_content_access(BlockContent $entity, $operation, AccountInterface $account) {
  if ($operation == 'update') {
    if ($entity->get('user_id')->target_id == $account->id())
      return AccessResult::allowed();
  }
}

/**
 * Implements hook_entity_field_access().
 */
function lesroidelareno_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // $context = ($operation == 'view') ? 'display' : 'edit';
  // if (!$field_definition->isDisplayConfigurable($context) || empty($items)) {
  // return AccessResult::neutral();
  // }
  // $access_field =
  // \Drupal::service('field_permissions.permissions_service')->getFieldAccess($operation,
  // $items, $account, $field_definition);
  // if (!$access_field) {
  // return AccessResult::forbidden();
  // }
  $disabledFields = [
    'field_domain_access',
    'user_id',
    'field_domain_source',
    'is_home_page',
    'is_default_theme',
    'path'
  ];
  
  if (in_array($field_definition->getName(), $disabledFields)) {
    if (in_array('administrator', $account->getRoles())) {
      return AccessResult::allowed();
    }
    else
      return AccessResult::forbidden();
  }
  // dump($field_definition->getName());
  return AccessResult::neutral();
}

/**
 * implement hook_ENTITY_TYPE_access
 */
function lesroidelareno_domain_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'view') {
    //
  }
}

function lesroidelareno_query_alter(\Drupal\Core\Database\Query\AlterableInterface $query) {
  // \Stephane888\Debug\debugLog::kintDebugDrupal($query->met,
  // 'lesroidelareno_query_alter', true);
}

/**
 * implement hook_query_entityreference_alter
 * Filtrer les requetes de recherche via le domaine tant que cela est possible.
 *
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 */
function lesroidelareno_query_entity_reference_alter(\Drupal\mysql\Driver\Database\mysql\Select $query) {
  
  /**
   *
   * @var \Drupal\domain\DomainNegotiator $domain
   */
  $domain = \Drupal::service('domain.negotiator');
  
  /**
   *
   * @var \Drupal\node\Plugin\EntityReferenceSelection\NodeSelection $entity_reference
   */
  $entity_reference = $query->getMetaData('entity_reference_selection_handler');
  
  $settings = $entity_reference->getConfiguration();
  if (!empty($settings['target_type'])) {
    // il faudra ajouter manuelement les entites qui varient en function du
    // domaine.
    switch ($settings['target_type']) {
      case 'node':
        $query->addJoin('INNER', 'node__field_domain_access', 'fda', 'fda.entity_id=base_table.nid');
        $query->condition('fda.field_domain_access_target_id', $domain->getActiveId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      default:
        // \Drupal::messenger()->addWarning("Cet filtre doit etre correctement
        // configurer : " . $settings['target_type']);
        break;
    }
  }
  
  // $field = $query->getMetadata('field');
  // if ($field['field_name'] != 'field_foo') {
  // // This is not the field we want to alter.
  // return;
  // }
  
  // // Get the base table.
  // $tables = $query->getTables();
  // $base_table = key($tables);
  
  // // Join to the new table.
  // $field_bar = field_info_field('field_drawer_type');
  // $table_name = _field_sql_storage_tablename($field_bar);
  // $query->innerJoin($table_name, 'drawer_type', '%alias.entity_id = ' .
  // $base_table . '.tid');
  
  // // Add conditions.
  // $query->condition('drawer_type.field_bar_value', 'baz', '=');
}

/**
 * --forcing
 *
 * @deprecated
 * @param array $vars
 */
function lesroidelareno_preprocess_clothingslayoutstitre(&$vars) {
  if (!empty($vars['settings']['layoutrestrictions']['use_roles']) && !empty($vars['settings']['layoutrestrictions']['roles'])) {
    $validRoles = [
      'administrator'
    ];
    /**
     *
     * @var User $user
     */
    $user = User::load(\Drupal::currentUser()->id());
    $currentRoles = $user->getRoles();
    foreach ($vars['settings']['layoutrestrictions']['roles'] as $value) {
      if ($value)
        $validRoles[] = $value;
    }
    //
    if (!empty($validRoles)) {
      $access = false;
      foreach ($validRoles as $role) {
        if (in_array($role, $currentRoles)) {
          $access = true;
          break;
        }
      }
      if (!$access) {
        $vars['content'] = [];
      }
    }
  }
}

/**
 * --forcing
 *
 * @deprecated
 * @param array $vars
 */
function lesroidelareno_preprocess_formatage_models_simple_block(&$vars) {
  if (!empty($vars['settings']['layoutrestrictions']['use_roles']) && !empty($vars['settings']['layoutrestrictions']['roles'])) {
    $validRoles = [
      'administrator'
    ];
    /**
     *
     * @var User $user
     */
    $user = User::load(\Drupal::currentUser()->id());
    $currentRoles = $user->getRoles();
    foreach ($vars['settings']['layoutrestrictions']['roles'] as $value) {
      if ($value)
        $validRoles[] = $value;
    }
    //
    if (!empty($validRoles)) {
      $access = false;
      foreach ($validRoles as $role) {
        if (in_array($role, $currentRoles)) {
          $access = true;
          break;
        }
      }
      if (!$access) {
        $vars['content'] = [];
      }
    }
  }
}

/**
 * Implements hook_entity_field_access().
 */
function lesroidelareno_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // on cache le champs: domain
  if (isset($form['domain']) && !\Drupal::currentUser()->hasPermission('administer site configuration')) {
    $form['domain']['#access'] = false;
  }
  // dump($form);
}

// /**
//  * Implement hook_jsonapi_entity_filter_access()
//  */
// function lesroidelareno_jsonapi_entity_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {
//   // dump($entity_type);
//   // For every entity type that has an admin permission, allow access to filter
//   // by all entities of that type to users with that permission.
//   return ([
//     JSONAPI_FILTER_AMONG_ALL => AccessResult::forbidden(),
//     JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::forbidden(),
//     JSONAPI_FILTER_AMONG_ENABLED => AccessResult::forbidden(),
//     JSONAPI_FILTER_AMONG_OWN => AccessResult::allowed()
//   ]);
// }

// /**
//  * Implement hook_jsonapi_ENTITY_TYPE_filter_access()
//  */
// function lesroidelareno_jsonapi_site_internet_entity_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {
//   return ([
//     JSONAPI_FILTER_AMONG_ALL => AccessResult::forbidden(),
//     JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::forbidden(),
//     JSONAPI_FILTER_AMONG_ENABLED => AccessResult::forbidden(),
//     JSONAPI_FILTER_AMONG_OWN => AccessResult::allowed()
//   ]);
// }

