<?php
use Drupal\Core\Url;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\lesroidelareno\HandlerClass\BlocksContentsListBuilder;
use Drupal\lesroidelareno\HandlerClass\BlocksContentsAccess;
use Drupal\lesroidelareno\HandlerClass\NodeAccess;
use Drupal\lesroidelareno\HandlerClass\BlockContentAccess;
use Drupal\lesroidelareno\HandlerClass\ParagraphAccess;
use Drupal\lesroidelareno\HandlerClass\configThemeAccess;
use Drupal\lesroidelareno\HandlerClass\SiteInternetAccess;
use Drupal\lesroidelareno\HandlerClass\CommerceProductAccess;
use Drupal\lesroidelareno\HandlerClass\CommervceProductVariationAccess;
use Drupal\lesroidelareno\HandlerClass\WebformAccess;
use Drupal\lesroidelareno\HandlerClass\RdvConfigAccess;
use Drupal\lesroidelareno\HandlerClass\MenuLinkContentAccess;
use Drupal\lesroidelareno\HandlerClass\BookingConfigAccess;
use Drupal\domain_source\DomainSourceElementManagerInterface;
use Drupal\domain_access\DomainAccessManagerInterface;
use Drupal\lesroidelareno\lesroidelareno;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Stephane888\Debug\Repositories\ConfigDrupal;

/**
 * implement hook_entity_presave
 * Objectif principale est de mettre à jour les données de chaque sauvegarder,
 * afin d'ameliorer la securité.
 */
function lesroidelareno_entity_presave(EntityInterface $entity) {
  $entity_id = $entity->getEntityTypeId();
  if ($entity->isNew()) {
    $roles = \Drupal::currentUser()->getRoles();
    $uid = lesroidelareno::getCurrentUserId();
    $isAdministrator = false;
    if (in_array('administrator', $roles))
      $isAdministrator = true;
    
    /**
     * Objectif est d'ajouté le domaine encours à certains entites( elements de
     * commerce ).
     * "commerce_order_item" porte les elements du panier.
     * (On ajoute cela egalement à d'autre entites).
     */
    $setDomaine = false;
    switch ($entity_id) {
      case 'commerce_order': // identification du checkout
      case 'commerce_order_item': // identification des elemnts du panier.
      case 'commerce_payment': // identification d'un paiement
      case 'commerce_payment_method': // identification d'une methode de
                                       // paiment
                                       // enregistrer
        $setDomaine = true;
        break;
    }
    if ($setDomaine) {
      $entity->set(DomainSourceElementManagerInterface::DOMAIN_SOURCE_FIELD, lesroidelareno::getCurrentDomainId());
      $entity->set(DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD, lesroidelareno::getCurrentDomainId());
    }
    elseif ($entity_id == 'paragraph' && $entity_id == 'menu_link_content') {
      /**
       * Lors de la creation d'un paragraph (ou ...) on remplit automatiquement
       * le champs'wbh_user_id'.
       */
      $entity->set('wbh_user_id', $uid);
    }
    // elseif ($entity_id == 'config_theme_entity') {
    // /**
    // *
    // * @var \Drupal\generate_style_theme\Entity\ConfigThemeEntity $entity
    // */
    // $entity->setOwnerId($uid);
    // /**
    // * On doit pouvoir envoyer les mails apres la generation du theme, donc on
    // * a esoin d'un email avec l'adresse du domaine.
    // * Example : salon-coif@wb-horizon.com
    // */
    // $site_config = $entity->getsite_config();
    // if (!empty($site_config)) {
    // \Drupal::entityTypeManager()->getStorage('domain_ovh_entity')->load($id);
    // $siteConfValue = Json::decode($site_config);
    
    // $siteConfValue['mail'] = $validMail;
    // }
    // }
    /**
     * Lors de la creaion d'un utilisateur on doit l'assigner un domaine, sauf
     * s'il en a deja.
     */
    elseif ($entity_id == 'user') {
      $domaines = $entity->get('field_domain_access')->getValue();
      if (!$domaines) {
        $entity->set('field_domain_access', lesroidelareno::getCurrentDomainId());
      }
    }
    else {
      if (!$isAdministrator) {
        /**
         * Pour un nouveau (blocks_contents, node ...), si l'utilisateur n'a
         * pas de role adminitrator, alors on met à jour l'auteur.
         * ( cela ne fonctionne toujours pas par defafut ).
         * Lorsqu'un utilisateur cree un de ses contenus on force son id, car
         * les informations pour initialiser la creation de l'entité peuvent
         * provenir d'un autre entite creer par une autre personne.
         */
        if ($entity_id == 'blocks_contents' || $entity_id == 'node' || $entity_id == 'block_content' || $entity_id == 'commerce_product' || $entity_id == 'config_theme_entity') {
          $entity->setOwnerId($uid);
        }
      }
    }
  }
}

/**
 * Cette fonction permet de de controller la maniere donc les contenus vont
 * s'afficher, etre creer, supprimer.
 * ( Pour les utilisateurs supplementaire qui pourront etre ajouter, on doit
 * charger les données en verifiant les droits des utilisateurs proprietaire de
 * site web et les doits qui leurs sont accordées ).
 *
 * @param array $entity_types
 */
function lesroidelareno_entity_type_alter(array &$entity_types) {
  $entity_types['blocks_contents']->setHandlerClass('list_builder', BlocksContentsListBuilder::class);
  $entity_types['blocks_contents']->setHandlerClass('access', BlocksContentsAccess::class);
  $entity_types['node']->setHandlerClass('access', NodeAccess::class);
  $entity_types['block_content']->setHandlerClass('access', BlockContentAccess::class);
  $entity_types['paragraph']->setHandlerClass('access', ParagraphAccess::class);
  $entity_types['commerce_product']->setHandlerClass('access', CommerceProductAccess::class);
  $entity_types['config_theme_entity']->setHandlerClass('access', configThemeAccess::class);
  $entity_types['site_internet_entity']->setHandlerClass('access', SiteInternetAccess::class);
  $entity_types['commerce_product_variation']->setHandlerClass('access', CommervceProductVariationAccess::class);
  $entity_types['webform']->setHandlerClass('access', WebformAccess::class);
  $entity_types['rdv_config_entity']->setHandlerClass('access', RdvConfigAccess::class);
  $entity_types['menu_link_content']->setHandlerClass('access', MenuLinkContentAccess::class);
  $entity_types['booking_config']->setHandlerClass('access', BookingConfigAccess::class);
  // $entity_types['cv_entity']->setHandlerClass('access',
  // configThemeAccess::class);
  // $entity_types['user']->setListBuilderClass(MyModuleListBuilder::class); //
  // Other solution possible
}

/**
 * implement hook_entity_base_field_info
 *
 * @param EntityTypeInterface $entity_type
 *
 */
function lesroidelareno_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'paragraph') {
    /**
     * Afin de ressoudre le probleme d'identification du proprietaire d'un
     * paragraphe, on ajoute un champs wbh_user_id.
     */
    $fields['wbh_user_id'] = BaseFieldDefinition::create('entity_reference')->setLabel(t(' Auteur (wbh)'))->setDescription(t('The user ID of author of the paragraph entity.'))->setDisplayOptions('form', [ //
    ])->setRevisionable(TRUE)->setSetting('target_type', 'user')->setSetting('handler', 'default')->setDisplayOptions('view', [ //
    ])->setDescription("Idealement on doit pouvoir identifier le paragraph à partir de l'entité parente.")->setDisplayConfigurable('form', true)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\lesroidelareno\lesroidelareno::getCurrentUserId');
  }
  
  elseif ($entity_type->id() == 'dis_period_entity') {
    __prise_rendez_vous_fields_domain($fields);
  }
  elseif ($entity_type->id() == 'equipes_entity') {
    __prise_rendez_vous_fields_domain($fields);
  }
  elseif ($entity_type->id() == 'submit_rdv_entity') {
    __prise_rendez_vous_fields_domain($fields);
  }
  elseif ($entity_type->id() == 'menu_link_content') {
    // on ajoute un champs pour identifier l'auteur du menu.
    // ( ca champs doit etre desactiver à l'avichage par defaut ).
    $fields['wbh_user_id'] = BaseFieldDefinition::create('entity_reference')->setLabel(t(' Auteur (wbh)'))->setDescription(t('The user ID of author of the paragrph entity.'))->setDisplayOptions('form', [ //
    ])->setRevisionable(TRUE)->setSetting('target_type', 'user')->setSetting('handler', 'default')->setDisplayOptions('view', [ //
    ])->setDescription("Idealement on doit pouvoir identifier l'auteur d'un element de menu à partir de l'entité parente.")->setDisplayConfigurable('form', true)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\lesroidelareno\lesroidelareno::getCurrentUserId');
  }
  
  return $fields;
}

/**
 * C'est specifique au type de contenu.
 *
 * @param array $fields
 */
function __prise_rendez_vous_fields_domain(array &$fields) {
  $field_access = \Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD;
  $field_source = \Drupal\domain_source\DomainSourceElementManagerInterface::DOMAIN_SOURCE_FIELD;
  //
  $fields[$field_access] = BaseFieldDefinition::create('entity_reference')->setLabel(t("Domain access"))->setTranslatable(false)->setDisplayOptions('form', [
    'type' => 'select2_entity_reference',
    'weight' => 40,
    'settings' => [
      'autocomplete' => true
    ]
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\creation_site_virtuel\CreationSiteVirtuel::getActiveDomain');
  //
  $fields[$field_source] = BaseFieldDefinition::create('entity_reference')->setLabel(t("Domain source"))->setDisplayOptions('form', [
    'type' => 'options_select',
    'weight' => 40
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setTranslatable(false);
}

/**
 * Implements hook_theme().
 */
function lesroidelareno_theme() {
  $hooks = [
    // permet de fournir un titre et une description.
    'lesroidelareno_texte_help' => [
      'variables' => [
        'titre' => null,
        'description' => null
      ]
    ]
  ];
  return $hooks;
}

// function lesroidelareno_preprocess_formatage_models_quickly_edit(&$vars) {
// \Drupal::messenger()->addStatus("lesroidelareno_preprocess_formatage_models_quickly_edit");
// }

/**
 * implement hook_preprocess_HOOK.
 *
 * Verifier les access de l'utilisateur connecté.
 *
 * @param array $vars
 */
function lesroidelareno_preprocess_formatage_models_quickly_edit__wbh(&$vars) {
  if (!lesroidelareno::userIsAdministratorSite()) {
    $vars['status_edit'] = false;
  }
}

/**
 * implement hook_theme_suggestions_HOOK_alter
 *
 * @param array $suggestions
 * @param array $variables
 * @see core/lib/Drupal/Core/Render/theme.api.php
 */
function lesroidelareno_theme_suggestions_formatage_models_quickly_edit(array $variables) {
  $suggestions = [];
  $suggestions[] = 'formatage_models_quickly_edit__wbh';
  return $suggestions;
}

/**
 * On souhaite afficher les les boutons d'edition uniquement si l'utilisateur
 * est proprietaire du site.
 *
 * @param array $vars
 */
function lesroidelareno_preprocess_menu_local_tasks(&$vars) {
  /**
   * On vide les elements tasks si l'utilisateur n'est pas sur son domaine.
   */
  if (!lesroidelareno::userIsAdministratorSite()) {
    $vars['primary'] = [];
    $vars['secondary'] = [];
  }
}

/**
 * Alter the fields used to represent an entity in the IEF table.
 *
 * @param array $fields
 *        The fields, keyed by field name.
 * @param array $context
 *        An array with the following keys:
 *        - parent_entity_type: The type of the parent entity.
 *        - parent_bundle: The bundle of the parent entity.
 *        - field_name: The name of the reference field on which IEF is
 *        operating.
 *        - entity_type: The type of the referenced entities.
 *        - allowed_bundles: Bundles allowed on the reference field.
 *        
 * @see \Drupal\inline_entity_form\InlineFormInterface::getTableFields()
 */
function lesroidelareno_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  // dump($context);
  if ($context['entity_type'] == 'node') {
    $fields[\Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = [
      'type' => 'field',
      'label' => 'Domain access',
      'weight' => 0
    ];
  }
  elseif ($context['entity_type'] == 'commerce_product') {
    $fields[\Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = [
      'type' => 'field',
      'label' => 'Domain access',
      'weight' => 0
    ];
  }
  elseif ($context['entity_type'] == 'block_content') {
    $fields['id'] = [
      'type' => 'field',
      'label' => t('ID'),
      'weight' => 0
    ];
    $fields[\Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = [
      'type' => 'field',
      'label' => 'Domain access',
      'weight' => 0
    ];
    $fields['type'] = [
      'type' => 'field',
      'label' => 'Type',
      'weight' => 0
    ];
  }
  elseif ($context['entity_type'] == 'blocks_contents') {
    $fields[\Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = [
      'type' => 'field',
      'label' => 'Domain access',
      'weight' => 0
    ];
  }
  elseif ($context['entity_type'] == 'paragraph') {
    $fields[\Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD] = [
      'type' => 'field',
      'label' => 'Domain access',
      'weight' => 0
    ];
  }
}

/**
 *
 * @param array $settings
 * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
 */
function lesroidelareno_js_settings_alter(array &$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  // dump('');
}

/**
 * implement hook_editor_js_settings_alter
 */
function lesroidelareno_editor_js_settings_alter(array &$settings) {
  $link = '/' . drupal_get_path('module', 'lesroidelareno') . '/js/ck-editor.js';
  foreach ($settings['editor']['formats'] as $k => $value) {
    $settings['editor']['formats'][$k]['editorSettings']['customConfig'] = $link;
  }
}

/**
 *
 * @param
 *        $vars
 */
function lesroidelareno_preprocess_html(&$vars) {
  $routeName = \Drupal::routeMatch()->getRouteName();
  // $config = ConfigDrupal::config("system.site");
  // dump($config);
  /**
   * charge une route.
   *
   * @var \Drupal\Core\Routing\RouteProvider $router
   */
  // $router = \Drupal::service("router.route_provider");
  // $r1 = $router->getRouteByName("entity.booking_config.add_form");
  // dump($r1);
  
  //
  //
  // $parameters = \Drupal::routeMatch()->getParameters()->all();
  // $parameters = \Drupal::routeMatch()->getParameters()->all();
  // if (!empty($parameters['content_generate_entity'])) {
  // /**
  // *
  // * @var \Drupal\generate_mapping_content\Entity\ContentGenerateEntity
  // $contentGenerate
  // */
  // $contentGenerate = $parameters['content_generate_entity'];
  // $intro = $contentGenerate->get('introduction')->value;
  // $metaDescription = [
  // '#tag' => 'meta',
  // '#attributes' => [
  // 'name' => 'description',
  // 'content' => strip_tags($intro)
  // ]
  // ];
  // $vars['page']['#attached']['html_head'][] = [
  // $metaDescription,
  // 'meta-description'
  // ];
  // }
  // else {
  // $vars['page']['#attached']['library'][] = 'login_rx_vuejs/vuejs_dev';
  // }
  //
  // On charge tawk sur les routes non admin.
  $hidden = false;
  $idUser = \Drupal::currentUser()->id();
  
  //
  if (!str_contains($routeName, 'system.admin') && !$hidden && $idUser != 1) {
    $vars['page']['#attached']['library'][] = 'lesroidelareno/lesroidelareno_tawk.config';
  }
  // On ajoute la class 'container' sur tous les pages de termes taxo.
  if ('entity.taxonomy_term.canonical' == $routeName) {
    if (empty($vars['page']['content']['attributes'])) {
      $Attribute = new Attribute();
      $Attribute->addClass('container');
      $vars['page']['content']['attributes'] = $Attribute;
    }
    else
      $vars['page']['content']['attributes']->addClass('container');
  }
  // On charge la bibiotheque pour ameliorer la presentation de l'edition des
  // forms et ...
  if ('entity.taxonomy_term.canonical' == $routeName || str_contains($routeName, '.edit_form')) {
    $vars['page']['#attached']['library'][] = 'lesroidelareno/lesroidelareno_admin';
  }
}

function _lesroidelareno_add_edit_button(&$vars) {
}

/**
 */
function lesroidelareno_preprocess_facets_result_item__checkbox(&$vars) {
  // if (!empty($vars['items'])) {
  // foreach ($vars['items'] as $k => $item) {
  // $vars['items'][$k]['value']['#title']['icone'] = [
  // '#type' => 'html_tag',
  // '#tag' => 'h1',
  // '#value' => 'Icone'
  // ];
  // }
  // }
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'name' => $vars['value'],
    'vid' => 'categorie_produit'
  ]);
  $image_style = 'thumbnail';
  /**
   *
   * @var \Drupal\taxonomy\Entity\Term $term
   */
  $field_name = 'field_image';
  $term = reset($term);
  if ($term->hasField($field_name)) {
    $first = $term->get($field_name)->first();
    if ($first) {
      $file = File::load($first->getValue()['target_id']);
      if ($file)
        $vars['icone'] = [
          '#theme' => 'image_style',
          '#style_name' => $image_style,
          '#uri' => $file->getFileUri()
        ];
    }
    else {
      $settings = $term->get($field_name)->getSettings();
      // dump($settings['default_image']);
      if (!empty($settings['default_image'])) {
        $fileManager = \Drupal::entityTypeManager()->getStorage('file');
        /**
         *
         * @var File $file
         */
        $file = $fileManager->loadByProperties([
          'uuid' => $settings['default_image']['uuid']
        ]);
        if (!empty($file)) {
          $file = reset($file);
          $vars['icone'] = [
            '#theme' => 'image_style',
            '#style_name' => $image_style,
            '#uri' => $file->getFileUri()
          ];
        }
      }
    }
  }
}

/**
 * Cette function est provisoir, elle corrige un bug au niveau de 'target_id';
 *
 * @param array $variables
 */
function lesroidelareno_preprocess_pager(array &$variables) {
  $element = $variables['pager']['#element'];
  $parameters = $variables['pager']['#parameters'];
  // $quantity = empty($variables['pager']['#quantity']) ? 0 :
  // $variables['pager']['#quantity'];
  $route_name = $variables['pager']['#route_name'];
  $route_parameters = $variables['pager']['#route_parameters'] ?? [];
  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  // Drupal\Core\Pager\PagerManager
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  if ($pager) {
    $current_page = $pager->getCurrentPage();
    $pager_max = $pager->getTotalPages();
    // clean parametter
    foreach ($parameters as $k => $value) {
      if (is_array($value)) {
        foreach ($value as $b => $val) {
          if (isset($val['target_id'])) {
            $parameters[$k][$b] = $val['target_id'];
          }
        }
      }
    }
    
    /**
     * On recrit les url pour les cas ou ces derniers contientienne target_id.
     */
    // pages
    if (!empty($variables['items']['pages'])) {
      foreach ($variables['items']['pages'] as $i => $page) {
        $options = [
          'query' => $pager_manager->getUpdatedParameters($parameters, $element, $i - 1)
        ];
        $variables['items']['pages'][$i]['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
      }
    }
    // first
    if (!empty($variables['items']['first'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, 0)
      ];
      $variables['items']['first']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
    // previous
    if (!empty($variables['items']['previous'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $current_page - 1)
      ];
      $variables['items']['previous']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
    // Next
    if (!empty($variables['items']['next'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $current_page + 1)
      ];
      $variables['items']['next']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
    // last
    if (!empty($variables['items']['last'])) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $pager_max - 1)
      ];
      $variables['items']['last']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    }
  }
  $attributes = new \Drupal\Core\Template\Attribute();
  $attributes->addClass([
    "pagination-lg",
    'bg-light',
    'pagination-round',
    'flex-wrap'
  ]);
  $variables['attributes'] = $attributes;
  $variables['#attached']['library'][] = 'lesroidelareno/lesroidelareno_pagination';
  // dump($variables);
}

/**
 *
 * @file
 * Primary module hooks for lesroidelareno module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
function lesroidelareno_views_pre_build(ViewExecutable $view) {
  /**
   *
   * @var \Drupal\node\Entity\Node $node
   */
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    if (!empty($node->field_selectionner_le_domaine) && $view->id() == 'realisations_par_prestataires') {
      /**
       *
       * @var \Drupal\Core\Field\FieldItemList $field
       */
      $field = $node->field_selectionner_le_domaine;
      $args = [];
      foreach ($field->getValue() as $val) {
        if (!empty($val['value'])) {
          $args[] = $val['value'];
          $args[] = $val['value'];
        }
      }
      
      $view->setArguments($args);
    }
    //
    elseif ($view->id() == 'produits_simialires' && $view->current_display == 'block_4') {
      /**
       *
       * @var \Drupal\Core\Field\FieldItemList $field
       */
      $field = $node->field_selectionner_le_domaine;
      $args = [];
      foreach ($field->getValue() as $val) {
        $args[] = $val['value'];
      }
      $view->setArguments($args);
    }
  }
}

/**
 * implement hook_preprocess_
 */
function lesroidelareno_preprocess_views_view_unformatted__produits_simialires(&$vars) {
  /**
   *
   * @var ViewExecutable $view
   */
  $view = $vars['view'];
  if ($view->current_display === 'block_3')
    foreach ($vars['rows'] as $key => $row) {
      if (isset($row['content']['#view_mode'])) {
        $template = _lesroidelareno_get_product_theme($vars['rows'][$key]['content']['#commerce_product']);
        $vars['rows'][$key]['content']['#view_mode'] = $template;
        $vars['rows'][$key]['content']['#cache']['keys'][3] = $template;
      }
    }
}

function _lesroidelareno_get_product_theme(Drupal\commerce_product\Entity\Product $product) {
  $val = $product->get('field_en_promotion_sur_les_roide')->offsetGet(0)->getValue();
  if (!empty($val['value'])) {
    return 'teaser_externe';
  }
  else {
    return 'teaser';
  }
}

/**
 * Implements hook_entity_field_access().
 */
function lesroidelareno_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // $context = ($operation == 'view') ? 'display' : 'edit';
  // if (!$field_definition->isDisplayConfigurable($context) || empty($items)) {
  // return AccessResult::neutral();
  // }
  // $access_field =
  // \Drupal::service('field_permissions.permissions_service')->getFieldAccess($operation,
  // $items, $account, $field_definition);
  // if (!$access_field) {
  // return AccessResult::forbidden();
  // }
  $disabledFields = [
    'field_domain_access',
    'user_id',
    'field_domain_source',
    'is_home_page',
    'is_default_theme',
    'path',
    'field_formulaire',
    'revision_log',
    'langcode',
    'wbh_user_id',
    'user_id'
  ];
  
  if (in_array($field_definition->getName(), $disabledFields)) {
    if (lesroidelareno::isAdministrator())
      return AccessResult::allowed();
    elseif ($operation != 'view')
      return AccessResult::forbidden();
  }
  // dump($field_definition->getName());
  return AccessResult::neutral();
}

/**
 *
 * @param \Drupal\mysql\Driver\Database\mysql\Select $query
 */
function lesroidelareno_query_alter(\Drupal\Core\Database\Query\AlterableInterface $query) {
  
  /**
   * On filtre les produits dans le panier en fonction du domaine encours.
   */
  if ($query->hasTag('commerce_cart_order_ids')) {
    $query->addJoin('INNER', 'commerce_order_item', 'coi', 'coi.order_id=commerce_order.order_id');
    $query->addJoin('INNER', 'commerce_product_variation_field_data', 'prd_va', 'prd_va.variation_id=coi.purchased_entity');
    $query->addJoin('INNER', 'commerce_product__field_domain_access', 'prd_da', 'prd_da.entity_id=prd_va.product_id');
    $query->condition('prd_da.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
    // dump('1=> ' . $query->__toString());
    // dump(lesroidelareno::getCurrentDomainId());
  }
}

/**
 * implement hook_query_entityreference_alter
 * Filtrer les requetes de recherche via le domaine tant que cela est possible.
 *
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 */
function lesroidelareno_query_entity_reference_alter(\Drupal\mysql\Driver\Database\mysql\Select $query) {
  
  /**
   *
   * @var \Drupal\node\Plugin\EntityReferenceSelection\NodeSelection $entity_reference
   */
  $entity_reference = $query->getMetaData('entity_reference_selection_handler');
  
  $settings = $entity_reference->getConfiguration();
  if (!empty($settings['target_type'])) {
    // il faudra ajouter manuelement les entites qui varient en function du
    // domaine.
    switch ($settings['target_type']) {
      case 'node':
        $query->addJoin('INNER', 'node__field_domain_access', 'fda', 'fda.entity_id=base_table.nid');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'commerce_product':
        $query->addJoin('INNER', 'commerce_product__field_domain_access', 'fda', 'fda.entity_id=base_table.product_id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'blocks_contents':
        $query->addJoin('INNER', 'blocks_contents__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'site_internet_entity':
        $query->addJoin('INNER', 'site_internet_entity__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'block_content':
        $query->addJoin('INNER', 'block_content__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'paragraph':
        $query->addJoin('INNER', 'paragraph__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break; //
      case 'model_cv':
        $query->addJoin('INNER', 'model_cv__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'cv_entity':
        $query->addJoin('INNER', 'cv_entity__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      // on doit également ajouté le fitre pour les elements suivants :
      case 'commerce_payment':
        $query->addJoin('INNER', 'commerce_payment__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'commerce_payment_method':
        $query->addJoin('INNER', 'commerce_payment_method__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        break;
      case 'commerce_order':
        $query->addJoin('INNER', 'commerce_order__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        // dump('2=> ' . $query->__toString());
        break;
      case 'commerce_order_item':
        $query->addJoin('INNER', 'commerce_order_item__field_domain_access', 'fda', 'fda.entity_id=base_table.id');
        $query->condition('fda.field_domain_access_target_id', lesroidelareno::getCurrentDomainId());
        $query->addField('fda', 'field_domain_access_target_id');
        // dump('3=> ' . $query->__toString());
        break;
      case 'site_type_datas':
      case 'taxonomy_term':
      case 'user':
      case 'file':
        // ignore
        break;
      default:
        \Drupal::messenger()->addWarning(" Cet filtre doit etre correctement configurer : " . $settings['target_type']);
        break;
    }
  }
  
  // $field = $query->getMetadata('field');
  // if ($field['field_name'] != 'field_foo') {
  // // This is not the field we want to alter.
  // return;
  // }
  
  // // Get the base table.
  // $tables = $query->getTables();
  // $base_table = key($tables);
  
  // // Join to the new table.
  // $field_bar = field_info_field('field_drawer_type');
  // $table_name = _field_sql_storage_tablename($field_bar);
  // $query->innerJoin($table_name, 'drawer_type', '%alias.entity_id = ' .
  // $base_table . '.tid');
  
  // // Add conditions.
  // $query->condition('drawer_type.field_bar_value', 'baz', '=');
}

/**
 * --forcing
 *
 * @deprecated
 * @param array $vars
 */
function lesroidelareno_preprocess_formatage_models_simple_block(&$vars) {
  if (!empty($vars['settings']['layoutrestrictions']['use_roles']) && !empty($vars['settings']['layoutrestrictions']['roles'])) {
    $validRoles = [
      'administrator'
    ];
    /**
     *
     * @var User $user
     */
    $user = User::load(\Drupal::currentUser()->id());
    $currentRoles = $user->getRoles();
    foreach ($vars['settings']['layoutrestrictions']['roles'] as $value) {
      if ($value)
        $validRoles[] = $value;
    }
    //
    if (!empty($validRoles)) {
      $access = false;
      foreach ($validRoles as $role) {
        if (in_array($role, $currentRoles)) {
          $access = true;
          break;
        }
      }
      if (!$access) {
        $vars['content'] = [];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function lesroidelareno_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // on cache le champs: domain
  if (isset($form['domain']) && !\Drupal::currentUser()->hasPermission('administer site configuration')) {
    $form['domain']['#access'] = false;
  }
  /**
   * On ajoute une fonction de submit à la configuration des RDV afin qu'il
   * redirige sur la page pour gerer les reservations.
   */
  elseif ($form_id == 'prise_rendez_vous_default_configs') {
    $form['description_help'] = [
      "#theme" => 'lesroidelareno_texte_help',
      "#titre" => "Configuration de l'identifiant",
      "#description" => "Vous pouvez concerserver les valeurs par defaut et passer à la prochaine etape.",
      "#weight" => -10
    ];
    $form['actions']['submit']['#value'] = 'Etape suivante';
    $form['#submit'][] = '_prise_rendez_vous_default_configs_submit';
  }
  // Redirection vers la page permettant de gerer les prises de rendez-vous.
  elseif ($form_id == 'rdv_config_entity_form') {
    $form['actions']['submit']['#submit'][] = '_rdv_config_entity_form_submit';
  }
  else {
    // dump($form_id);
  }
}

/**
 * Redirection vers la page permettant de gerer les prises de rendez-vous.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _prise_rendez_vous_default_configs_submit(array &$form, FormStateInterface $form_state) {
  $form_state->setRedirect('lesroidelareno.manage_rdv_configs');
}

/**
 * Apres soumition, on redirige vers le tableeau de bord.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _rdv_config_entity_form_submit(array &$form, FormStateInterface $form_state) {
  $form_state->setRedirect('user.page');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function lesroidelareno_form_menu_form_alter(&$form, FormStateInterface $form_state) {
  // Load the current node type configuration entity.
  /**
   *
   * @var \Drupal\system\Entity\Menu $menu
   */
  $menu = $form_state->getFormObject()->getEntity();
  $form['domain_id'] = [
    '#type' => 'textfield',
    '#title' => t('Domain Id'),
    '#default_value' => $menu->getThirdPartySetting('lesroidelareno', 'domain_id', lesroidelareno::getCurrentDomainId())
  ];
  $form['#entity_builders'][] = 'lesroidelareno_form_menu_form_builder';
}

/**
 * Ajoute des champs au niveau de la configuration.
 *
 * @return number
 */
function lesroidelareno_form_menu_form_builder($entity_type, $type, &$form, FormStateInterface $form_state) {
  /**
   * On ajoute le champs doamin_id.
   */
  if (!empty($form_state->getValue('domain_id'))) {
    $type->setThirdPartySetting('lesroidelareno', 'domain_id', $form_state->getValue('domain_id'));
    return $form_state->getValue('domain_id');
  }
  $type->unsetThirdPartySetting('lesroidelareno', 'domain_id');
}






